import { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
export declare type Method = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'OPTIONS';
export declare type UrlTemplate = string;
export declare type OnPending = <TParams>(params: TParams, options: Options) => Options | Promise<Options>;
export declare type OnResolve = <TParams>(response: AxiosResponse, params: TParams, options: Options) => any;
export declare type OnReject = <TParams>(response: AxiosError, params: TParams, options: Options) => any;
export declare type Enhance = <TRequest extends (params: any, options?: Options) => Promise<any>>(request: TRequest, options: Options) => TRequest;
export interface Options extends AxiosRequestConfig {
    onPending?: OnPending;
    onResolve?: OnResolve;
    onReject?: OnReject;
    enhance?: Enhance;
    interpolate?: RegExp;
    urlTemplate?: UrlTemplate;
    encodePathVariable?: boolean;
    transformDeleteParamsIntoBody?: boolean;
    [whatever: string]: any;
}
