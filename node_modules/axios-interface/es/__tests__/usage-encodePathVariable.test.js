var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import MockAdapter from 'axios-mock-adapter';
import { axios, createFactory } from '..';
const { createInterface: createInterface1 } = createFactory();
const { createInterface: createInterface2 } = createFactory({
    encodePathVariable: true,
});
const mock = new MockAdapter(axios);
describe('encodePathVariable', () => {
    test('encodePathVariable: false', () => __awaiter(void 0, void 0, void 0, function* () {
        const getUser = createInterface1('GET', '/users/{id}');
        mock.onGet(/\/users\/*/).reply(config => {
            return [
                200,
                {
                    status: 'OK',
                    url: config.url,
                },
            ];
        });
        expect.assertions(1);
        const response = yield getUser({ id: 'a/b' });
        expect(response).toStrictEqual({
            status: 'OK',
            url: '/users/a/b',
        });
    }));
    test('encodePathVariable: false', () => __awaiter(void 0, void 0, void 0, function* () {
        const getUser = createInterface2('GET', '/users/{id}');
        mock.onGet(/\/users\/*/).reply(config => {
            return [
                200,
                {
                    status: 'OK',
                    url: config.url,
                },
            ];
        });
        expect.assertions(1);
        const response = yield getUser({ id: 'a/b' });
        expect(response).toStrictEqual({
            status: 'OK',
            url: '/users/a%2Fb',
        });
    }));
});
