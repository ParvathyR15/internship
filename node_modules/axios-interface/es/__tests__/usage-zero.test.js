var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// @ts-nocheck
import MockAdapter from 'axios-mock-adapter';
import { axios, createFactory } from '..';
const { createInterface } = createFactory();
const mock = new MockAdapter(axios);
const getIdFromConfig = (config) => {
    const urls = config.url.split('/');
    return urls[urls.length - 1];
};
describe('axios', () => {
    test('basic axios usage', () => __awaiter(void 0, void 0, void 0, function* () {
        const users = [{ id: 1, name: 'John Smith' }];
        const data = { users };
        mock.onGet('/users').reply(200, data);
        expect.assertions(1);
        const response = yield axios.get('/users');
        expect(response.data).toStrictEqual(data);
    }));
});
describe('basic createInterface usage', () => {
    const users = [{ id: '23000019860624742X', name: 'Daniel Thomas' }];
    const getUser = createInterface('GET', '/users');
    test('basic resolve', () => __awaiter(void 0, void 0, void 0, function* () {
        const data = {
            status: 'OK',
            data: users,
        };
        mock.onGet('/users').reply(200, data);
        expect.assertions(1);
        const response = yield getUser();
        expect(response).toStrictEqual(data);
    }));
    test('unhandled reject', () => __awaiter(void 0, void 0, void 0, function* () {
        mock.onGet('/users').reply(502);
        expect.assertions(1);
        try {
            yield getUser();
        }
        catch (error) {
            expect(error.message).toBe('Request failed with status code 502');
        }
    }));
    test('unhandled reject with data', () => __awaiter(void 0, void 0, void 0, function* () {
        const data = {
            status: 'FORBIDDEN',
            message: 'error',
        };
        mock.onGet('/users').reply(502, data);
        expect.assertions(1);
        try {
            yield getUser();
        }
        catch (error) {
            expect(error.message).toBe('Request failed with status code 502');
        }
    }));
    test('unhandled timeout', () => __awaiter(void 0, void 0, void 0, function* () {
        mock.onGet('/users').reply(0);
        expect.assertions(1);
        try {
            yield getUser();
        }
        catch (error) {
            expect(error.message).toBe('Request failed with status code 0');
        }
    }));
});
describe('basic post/put/delete usage', () => {
    test('basic post', () => __awaiter(void 0, void 0, void 0, function* () {
        const postUser = createInterface('POST', '/users');
        mock.onPost('/users').reply(config => {
            return [
                200,
                {
                    status: 'OK',
                    data: Object.assign({ id: '130000201201118292' }, JSON.parse(config.data)),
                },
            ];
        });
        expect.assertions(1);
        const response = yield postUser({ name: 'Ruth Jones' });
        expect(response).toStrictEqual({
            status: 'OK',
            data: { id: '130000201201118292', name: 'Ruth Jones' },
        });
    }));
    test('basic put', () => __awaiter(void 0, void 0, void 0, function* () {
        const putUser = createInterface('PUT', '/users/{id}');
        mock.onPut(/\/users\/\d+/).reply(config => {
            const id = getIdFromConfig(config);
            return [
                200,
                {
                    status: 'OK',
                    data: Object.assign({ id }, JSON.parse(config.data)),
                },
            ];
        });
        expect.assertions(1);
        const response = yield putUser({ id: '620000199004298120', name: 'Betty Martinez' });
        expect(response).toStrictEqual({
            status: 'OK',
            data: { id: '620000199004298120', name: 'Betty Martinez' },
        });
    }));
    test('basic delete', () => __awaiter(void 0, void 0, void 0, function* () {
        const deleteUser = createInterface('DELETE', '/users/{id}');
        mock.onDelete(/\/users\/\d+/).reply(200, {
            status: 'OK',
            data: true,
        });
        expect.assertions(1);
        const response = yield deleteUser({ id: '140000200609308281' });
        expect(response).toStrictEqual({ data: true, status: 'OK' });
    }));
});
describe('basic createInterface urlTemplate usage', () => {
    const user = { id: 1, name: 'John Smith' };
    const getUser = createInterface('GET', '/users/{id}');
    test('basic resolve', () => __awaiter(void 0, void 0, void 0, function* () {
        const data = {
            status: 'OK',
            data: user,
        };
        mock.onGet(/\/users\/\d+/).reply(200, data);
        expect.assertions(1);
        const response = yield getUser({ id: 1 });
        expect(response).toStrictEqual({
            status: 'OK',
            data: user,
        });
    }));
    test('basic reject', () => __awaiter(void 0, void 0, void 0, function* () {
        const data = {
            status: 'FORBIDDEN',
            message: 'error',
        };
        mock.onGet(/\/users\/\d+/).reply(200, data);
        expect.assertions(1);
        const response = yield getUser({ id: 1 });
        expect(response).toEqual(data);
    }));
    test('unhandled reject', () => __awaiter(void 0, void 0, void 0, function* () {
        mock.onGet(/\/users\/\d+/).reply(502);
        expect.assertions(1);
        try {
            yield getUser({ id: 1 });
        }
        catch (error) {
            expect(error.message).toEqual('Request failed with status code 502');
        }
    }));
});
