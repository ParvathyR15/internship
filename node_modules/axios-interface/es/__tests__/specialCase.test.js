var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import MockAdapter from 'axios-mock-adapter';
import { axios, createFactory } from '..';
const mock = new MockAdapter(axios);
const data = {
    status: 'OK',
    data: [{ name: 'test' }],
};
mock.onGet('/users').reply(200, data);
describe('enhance', () => {
    test('basic', () => __awaiter(void 0, void 0, void 0, function* () {
        const { createInterface } = createFactory();
        const enhance = request => request;
        const getUser = createInterface('GET', '/users', { enhance });
        expect.assertions(1);
        const response = yield getUser();
        expect(response).toStrictEqual(data);
    }));
});
describe('async onPending', () => {
    test('basic', () => __awaiter(void 0, void 0, void 0, function* () {
        const { createInterface } = createFactory({
            onPending: (params, options) => __awaiter(void 0, void 0, void 0, function* () { return options; }),
        });
        const getUser = createInterface('GET', '/users');
        expect.assertions(1);
        const response = yield getUser();
        expect(response).toStrictEqual(data);
    }));
});
describe('request options', () => {
    test('', () => __awaiter(void 0, void 0, void 0, function* () {
        const { createInterface } = createFactory();
        const getUser = createInterface('GET', '/users');
        expect.assertions(1);
        const response = yield getUser(undefined, {});
        expect(response).toStrictEqual(data);
    }));
});
describe('request', () => {
    test('', () => __awaiter(void 0, void 0, void 0, function* () {
        const { request } = createFactory();
        expect.assertions(1);
        const response = yield request('GET', '/users');
        expect(response).toStrictEqual(data);
    }));
});
describe('unexpected', () => {
    test('', () => __awaiter(void 0, void 0, void 0, function* () {
        const { createInterface } = createFactory();
        const getUser = createInterface('GET', '/users/{id}');
        mock.onGet(/\/users\/\d*/).reply(200, data);
        expect.assertions(1);
        const response = yield getUser();
        expect(response).toStrictEqual(data);
    }));
});
