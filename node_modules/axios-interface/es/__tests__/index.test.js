var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as mainExport from '..';
import { createFactory } from '..';
describe('export api', () => {
    test('export api', () => {
        const { axios, createFactory } = mainExport, rest = __rest(mainExport, ["axios", "createFactory"]);
        expect(typeof axios).toBe('function');
        expect(typeof createFactory).toBe('function');
        expect(rest).toEqual({});
    });
    test('createFactory api', () => {
        const _a = createFactory(), { createInterface, request, options } = _a, rest = __rest(_a, ["createInterface", "request", "options"]);
        expect(typeof createInterface).toBe('function');
        expect(typeof createInterface).toBe('function');
        expect(typeof request).toBe('function');
        expect(typeof options).toBe('object');
        expect(rest).toEqual({});
    });
    test('createInterface api', () => {
        const { createInterface } = createFactory();
        const api = createInterface('GET', 'https://www.example.com');
        expect(typeof api).toBe('function');
        expect(typeof api.method).toBe('string');
        expect(typeof api.urlTemplate).toBe('string');
        expect(typeof api.options).toBe('object');
    });
});
