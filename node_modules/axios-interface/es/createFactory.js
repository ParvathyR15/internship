/**
 * @file 通用API请求功能
 * @author zhangcong06, zhanglili
 */
import axios from 'axios';
import omit from './utils/omit';
import { basicParamsTransform } from './utils/onPendingUtils';
// zero 时的配置
const passSecondThrough = (params, options) => options;
const extractResponseData = value => value.data;
const throwThrough = e => {
    throw e;
};
const getMergedOptions = (options, defaultOptions) => {
    // istanbul ignore next
    if (typeof options === 'function') {
        return Object.assign(Object.assign({}, defaultOptions), options(defaultOptions));
    }
    return Object.assign(Object.assign({}, defaultOptions), options);
};
const createFactory = (defaultOptions = {}) => {
    const request = (method, url, params, options = {}) => {
        // 可以在 option 里覆盖 method 和 url，不推荐这么做，但逻辑上可以
        const combinedOptions = basicParamsTransform(params, Object.assign(Object.assign(Object.assign({}, defaultOptions), { method, url }), options));
        const { onPending, onResolve, onReject, } = combinedOptions;
        const combinedOnPending = onPending !== null && onPending !== void 0 ? onPending : passSecondThrough;
        const combinedOnResolve = onResolve !== null && onResolve !== void 0 ? onResolve : extractResponseData;
        const combinedOnReject = onReject !== null && onReject !== void 0 ? onReject : throwThrough;
        const handleResolve = (result) => {
            return combinedOnResolve(result, params, combinedOptions);
        };
        const handleReject = (reason) => {
            return combinedOnReject(reason, params, combinedOptions);
        };
        const config = combinedOnPending(params, combinedOptions);
        const requestPromise = config instanceof Promise
            ? config.then(awaitedConfig => axios.request(awaitedConfig))
            : axios.request(config);
        return requestPromise.then(handleResolve, handleReject);
    };
    const { interpolate = /{(\w+)}/g } = defaultOptions;
    // 使用URL的模板快速创建一个API接口
    const createInterface = (method, urlTemplate, options = {}) => {
        const interfaceOptions = getMergedOptions(options, defaultOptions);
        interfaceOptions.urlTemplate = urlTemplate;
        const { enhance, encodePathVariable } = interfaceOptions;
        let toRequestData = (value) => value;
        let toRequestUrl = () => urlTemplate;
        // 两者有些差异，暂时与后面 replace 保持一致
        // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
        const variablesInTemplate = urlTemplate.match(interpolate);
        if (variablesInTemplate) {
            const templateKeys = variablesInTemplate.map(s => s.slice(1, -1));
            toRequestData = omit(templateKeys);
            toRequestUrl = (variables = {}) => urlTemplate.replace(interpolate, (match, name) => {
                const variable = variables[name];
                return encodePathVariable ? encodeURIComponent(variable) : variable;
            });
        }
        const templateRequest = (params, options = {}) => {
            const requestUrl = toRequestUrl(params);
            const requestData = toRequestData(params);
            const requestOptions = getMergedOptions(options, interfaceOptions);
            return request(method, requestUrl, requestData, requestOptions);
        };
        templateRequest.method = method;
        templateRequest.urlTemplate = urlTemplate;
        templateRequest.options = interfaceOptions;
        if (enhance) {
            // 如果是 factory 时期的 enhance，应该被强制使用 any 这样更 general 的类型定义
            const enhancedTemplateRequest = enhance(templateRequest, interfaceOptions);
            enhancedTemplateRequest.method = method;
            enhancedTemplateRequest.urlTemplate = urlTemplate;
            enhancedTemplateRequest.options = interfaceOptions;
            return enhancedTemplateRequest;
        }
        return templateRequest;
    };
    // 返回 request 以兼容一部分写法
    return { request, createInterface, options: defaultOptions };
};
export default createFactory;
